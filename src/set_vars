#!/usr/bin/env ruby

require 'optparse'
require 'inifile'

require_relative 'aws'


# Load the same creds as used by ansible and the CLI tool
creds  = IniFile.load( File.join(ENV['HOME'], '.aws', 'credentials') )
config = IniFile.load( File.join(ENV['HOME'], '.aws', 'config') )

ACCESS_KEY=creds['default']['aws_access_key_id']
SECRET_KEY=creds['default']['aws_secret_access_key']
REGION=config['default']['region']
ROLE=ENV.fetch('AWS_ROLE', 'MioRole')


vpc_name = 'default'
security_group_name = 'default'
role_name = ROLE
mode = :preflight
cluster = nil
root = '/'

OptionParser.new do|opts|
  opts.banner = "#{$0} [opts]"
  opts.on('-v', '--vpc name', 'VPC Name')                                {|o| vpc_name = o}
  opts.on('-s', '--security_group name', 'Security Group Name')          {|o| security_group_name = o}
  opts.on('-r', '--role name', 'IAM Role Name')                          {|o| role_name = o}
  opts.on('-m', '--mode [preflight|hosts]', 'Mode in which to run')      {|o| mode = o.to_sym}
  opts.on('-c', '--cluster name', 'In hosts mode, cluster to query')     {|o| cluster = o}
  opts.on('-d', '--root-dir dir', 'root directory of config, default /') {|o| root = o}
end.parse!

aws = AWS.new ACCESS_KEY, SECRET_KEY, REGION, vpc_name, role_name


if mode == :preflight
  security_group = aws.security_group_lookup security_group_name
  puts "export SECURITY_GROUP_ID=#{security_group.group_id}"

  web_security_group = aws.security_group_lookup 'Web'
  puts "export WEB_SECURITY_GROUP_ID=#{web_security_group.group_id}"

  private_security_group = aws.security_group_lookup 'Private'
  puts "export PRIVATE_SECURITY_GROUP_ID=#{private_security_group.group_id}"

  cloudamqp_security_group = aws.security_group_lookup 'Cloudamqp'
  puts "export CLOUDAMQP_SECURITY_GROUP_ID=#{cloudamqp_security_group.group_id}"

  elasticsearch_security_group = aws.security_group_lookup 'ElasticSearch'
  puts "export ELASTICSEARCH_SECURITY_GROUP_ID=#{elasticsearch_security_group.group_id}"

  aws.vpc_public_subnets.each_with_index do |s,i|
    puts "export PUBLIC_SUBNET_#{i}=#{s}"
  end

  aws.vpc_private_subnets.each_with_index do |s,i|
    puts "export PRIVATE_SUBNET_#{i}=#{s}"
  end

  puts "export ROLE_ARN=#{aws.role_lookup}"

elsif mode == :hosts
  raise ArgumentError, 'Hosts mode requires cluster_name to be set with -c' if cluster.nil?

  all_hosts = []

  aws.cluster_name = cluster

  File.open( File.join(root, 'ansible_hosts'), 'a') do |f|
    %w{storage mongo elasticsearch mongo_config mongo_router mongo_shard blaze}.each do |type|
      f.puts "[#{type}]"
      hosts = aws.infra_host_lookup(type)
      hosts.each do |ip_addr|
        f.puts "#{ip_addr} ansible_user=ec2-user ansible_ssh_private_key_file=/keys/dios-mio.pem"
      end

      puts "export #{type.upcase}_NODES=#{hosts.join(',')}"
    end

    %w{master job service router consul utility}.each do |type|
      f.puts "[#{type}]"
      hosts = aws.cluster_host_lookup(type)
      hosts.each do |ip_addr|
        all_hosts << ip_addr
        f.puts "#{ip_addr} ansible_user=ec2-user ansible_ssh_private_key_file=/keys/dios-mio.pem"
      end

      puts "export #{type.upcase}_NODES=#{hosts.join(',')}"
    end

  end
  puts "export ALL_HOSTS=#{all_hosts.join(',')}"

  db_url = aws.database_url
  puts "export DB_HOST=#{db_url}"
else
  raise ArgumentError, "mode #{mode.to_s} is invalid"
end
